
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 18 15:25:16 BRT 2018
//----------------------------------------------------

package compilador;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;
import compilador.Yylex;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 18 15:25:16 BRT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\005\000\002\017" +
    "\003\000\002\020\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\021\003\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\022\003\000\002\023\003\000" +
    "\002\024\003\000\002\025\003\000\002\026\003\000\002" +
    "\010\005\000\002\010\007\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\043\003\000\002\005\007" +
    "\000\002\027\003\000\002\030\003\000\002\031\003\000" +
    "\002\007\007\000\002\032\003\000\002\011\004\000\002" +
    "\011\004\000\002\011\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\006\005\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\013\011\000" +
    "\002\033\003\000\002\034\003\000\002\035\003\000\002" +
    "\014\011\000\002\036\003\000\002\015\006\000\002\037" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\040\003\000\002\016\015\000\002\041\003\000" +
    "\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\013\004\001\002\000\016\004\uffff\011" +
    "\uffff\016\uffff\017\uffff\020\uffff\026\uffff\001\002\000\004" +
    "\002\163\001\002\000\016\004\021\011\025\016\027\017" +
    "\007\020\022\026\024\001\002\000\004\007\uffdd\001\002" +
    "\000\022\004\021\011\025\014\ufffb\016\027\017\007\020" +
    "\022\023\ufffb\026\024\001\002\000\004\007\063\001\002" +
    "\000\004\007\063\001\002\000\004\014\134\001\002\000" +
    "\022\004\021\011\025\014\ufff9\016\027\017\007\020\022" +
    "\023\ufff9\026\024\001\002\000\004\007\063\001\002\000" +
    "\022\004\021\011\025\014\ufff8\016\027\017\007\020\022" +
    "\023\ufff8\026\024\001\002\000\026\004\uffd3\005\074\006" +
    "\100\011\uffd3\014\uffd3\016\uffd3\017\uffd3\020\uffd3\023\uffd3" +
    "\026\uffd3\001\002\000\022\004\021\011\025\014\ufffa\016" +
    "\027\017\007\020\022\023\ufffa\026\024\001\002\000\004" +
    "\007\uffd1\001\002\000\004\007\uffc5\001\002\000\022\004" +
    "\021\011\025\014\ufffd\016\027\017\007\020\022\023\ufffd" +
    "\026\024\001\002\000\016\010\uffed\015\uffed\025\uffed\026" +
    "\uffed\031\uffed\032\uffed\001\002\000\022\004\ufff1\011\ufff1" +
    "\014\ufff1\016\ufff1\017\ufff1\020\ufff1\023\ufff1\026\ufff1\001" +
    "\002\000\004\007\063\001\002\000\004\007\uffe1\001\002" +
    "\000\004\015\034\001\002\000\022\004\021\011\025\014" +
    "\ufffc\016\027\017\007\020\022\023\ufffc\026\024\001\002" +
    "\000\006\014\ufff6\023\ufff6\001\002\000\012\007\042\024" +
    "\043\026\024\032\037\001\002\000\012\007\uffec\024\uffec" +
    "\026\uffec\032\uffec\001\002\000\004\025\047\001\002\000" +
    "\004\012\055\001\002\000\012\010\uffeb\012\uffeb\026\uffeb" +
    "\032\uffeb\001\002\000\004\012\055\001\002\000\006\012" +
    "\055\025\047\001\002\000\010\007\042\024\043\026\024" +
    "\001\002\000\012\010\uffe9\012\uffe9\021\uffe9\025\uffe9\001" +
    "\002\000\004\010\051\001\002\000\004\025\047\001\002" +
    "\000\004\024\043\001\002\000\010\007\uffe3\024\uffe3\026" +
    "\uffe3\001\002\000\006\010\uffe8\012\uffe8\001\002\000\010" +
    "\010\uffe6\012\uffe6\025\047\001\002\000\010\007\042\024" +
    "\043\026\024\001\002\000\006\010\uffe7\012\uffe7\001\002" +
    "\000\022\004\uffef\011\uffef\014\uffef\016\uffef\017\uffef\020" +
    "\uffef\023\uffef\026\uffef\001\002\000\022\004\uffea\011\uffea" +
    "\014\uffea\016\uffea\017\uffea\020\uffea\023\uffea\026\uffea\001" +
    "\002\000\022\004\ufff0\011\ufff0\014\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\023\ufff0\026\ufff0\001\002\000\022\004\uffee\011" +
    "\uffee\014\uffee\016\uffee\017\uffee\020\uffee\023\uffee\026\uffee" +
    "\001\002\000\010\007\042\024\043\026\024\001\002\000" +
    "\006\010\uffe4\012\uffe4\001\002\000\010\010\uffe5\012\uffe5" +
    "\025\047\001\002\000\010\024\uffe0\026\uffe0\032\uffe0\001" +
    "\002\000\004\026\024\001\002\000\004\010\066\001\002" +
    "\000\006\012\uffdf\022\uffdf\001\002\000\004\012\055\001" +
    "\002\000\022\004\uffe2\011\uffe2\014\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\023\uffe2\026\uffe2\001\002\000\006\014\ufff7\023" +
    "\ufff7\001\002\000\006\014\ufff4\023\ufff4\001\002\000\004" +
    "\022\106\001\002\000\004\007\uffcd\001\002\000\004\007" +
    "\063\001\002\000\022\004\uffd5\011\uffd5\014\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\023\uffd5\026\uffd5\001\002\000\024\004" +
    "\uffd4\006\100\011\uffd4\014\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\023\uffd4\026\uffd4\001\002\000\004\022\uffcb\001\002\000" +
    "\022\004\uffd6\011\uffd6\014\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\023\uffd6\026\uffd6\001\002\000\004\026\024\001\002\000" +
    "\004\031\114\001\002\000\004\010\066\001\002\000\004" +
    "\022\106\001\002\000\016\004\uffd0\011\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\026\uffd0\001\002\000\016\004\021\011\025" +
    "\016\027\017\007\020\022\026\024\001\002\000\004\023" +
    "\112\001\002\000\024\004\uffce\006\uffce\011\uffce\014\uffce" +
    "\016\uffce\017\uffce\020\uffce\023\uffce\026\uffce\001\002\000" +
    "\026\004\uffcf\005\uffcf\006\uffcf\011\uffcf\014\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\023\uffcf\026\uffcf\001\002\000\012\007" +
    "\042\024\043\026\024\032\037\001\002\000\012\007\uffc7" +
    "\024\uffc7\026\uffc7\032\uffc7\001\002\000\004\010\uffc8\001" +
    "\002\000\004\010\uffc9\001\002\000\006\010\uffca\025\047" +
    "\001\002\000\016\004\021\011\025\016\027\017\007\020" +
    "\022\026\024\001\002\000\004\023\112\001\002\000\022" +
    "\004\uffcc\011\uffcc\014\uffcc\016\uffcc\017\uffcc\020\uffcc\023" +
    "\uffcc\026\uffcc\001\002\000\006\014\ufff2\023\ufff2\001\002" +
    "\000\004\026\024\001\002\000\004\010\066\001\002\000" +
    "\004\022\106\001\002\000\016\004\021\011\025\016\027" +
    "\017\007\020\022\026\024\001\002\000\004\023\112\001" +
    "\002\000\026\004\uffd2\005\uffd2\006\uffd2\011\uffd2\014\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\023\uffd2\026\uffd2\001\002\000" +
    "\006\014\ufff3\023\ufff3\001\002\000\004\002\000\001\002" +
    "\000\004\002\ufffe\001\002\000\006\026\024\032\037\001" +
    "\002\000\006\010\uffd7\032\037\001\002\000\006\010\uffda" +
    "\026\024\001\002\000\004\010\066\001\002\000\004\012" +
    "\055\001\002\000\022\004\uffde\011\uffde\014\uffde\016\uffde" +
    "\017\uffde\020\uffde\023\uffde\026\uffde\001\002\000\010\010" +
    "\uffdb\026\024\032\037\001\002\000\004\010\uffd8\001\002" +
    "\000\010\010\uffdc\026\024\032\037\001\002\000\004\010" +
    "\uffd9\001\002\000\004\024\043\001\002\000\004\021\152" +
    "\001\002\000\004\024\043\001\002\000\004\024\uffc4\001" +
    "\002\000\004\021\152\001\002\000\004\024\043\001\002" +
    "\000\004\010\066\001\002\000\004\022\106\001\002\000" +
    "\016\004\021\011\025\016\027\017\007\020\022\026\024" +
    "\001\002\000\004\023\112\001\002\000\022\004\uffc6\011" +
    "\uffc6\014\uffc6\016\uffc6\017\uffc6\020\uffc6\023\uffc6\026\uffc6" +
    "\001\002\000\006\014\ufff5\023\ufff5\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\006\002\004\017\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\012\004\022\005\030" +
    "\006\007\007\017\013\016\016\015\021\013\022\027\027" +
    "\025\032\011\033\014\041\010\001\001\000\002\001\001" +
    "\000\034\003\161\004\022\005\030\006\007\007\017\013" +
    "\016\016\015\021\013\022\027\027\025\032\011\033\014" +
    "\041\010\001\001\000\004\030\146\001\001\000\004\030" +
    "\134\001\001\000\004\020\132\001\001\000\034\003\131" +
    "\004\022\005\030\006\007\007\017\013\016\016\015\021" +
    "\013\022\027\027\025\032\011\033\014\041\010\001\001" +
    "\000\004\030\123\001\001\000\034\003\122\004\022\005" +
    "\030\006\007\007\017\013\016\016\015\021\013\022\027" +
    "\027\025\032\011\033\014\041\010\001\001\000\012\014" +
    "\076\015\075\036\074\037\072\001\001\000\034\003\071" +
    "\004\022\005\030\006\007\007\017\013\016\016\015\021" +
    "\013\022\027\027\025\032\011\033\014\041\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\070\004" +
    "\022\005\030\006\007\007\017\013\016\016\015\021\013" +
    "\022\027\027\025\032\011\033\014\041\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\063\001\001" +
    "\000\002\001\001\000\004\023\032\001\001\000\034\003" +
    "\031\004\022\005\030\006\007\007\017\013\016\016\015" +
    "\021\013\022\027\027\025\032\011\033\014\041\010\001" +
    "\001\000\002\001\001\000\012\010\035\022\034\024\037" +
    "\026\040\001\001\000\002\001\001\000\004\043\057\001" +
    "\001\000\004\025\056\001\001\000\002\001\001\000\004" +
    "\025\055\001\001\000\006\025\053\043\045\001\001\000" +
    "\010\010\043\022\034\026\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\045\001\001\000\004\026" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\051\001\001\000\010\010\052\022\034\026\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\060\022" +
    "\034\026\061\001\001\000\002\001\001\000\004\043\045" +
    "\001\001\000\002\001\001\000\004\022\064\001\001\000" +
    "\004\031\066\001\001\000\002\001\001\000\004\025\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\117\001\001\000\002\001\001\000\004" +
    "\030\101\001\001\000\002\001\001\000\006\015\100\037" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\103\022\102\001\001\000\004\040\112\001\001\000" +
    "\004\031\104\001\001\000\004\034\106\001\001\000\002" +
    "\001\001\000\034\003\107\004\022\005\030\006\007\007" +
    "\017\013\016\016\015\021\013\022\027\027\025\032\011" +
    "\033\014\041\010\001\001\000\004\035\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\114\022\034" +
    "\024\115\026\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\045\001\001\000\034" +
    "\003\120\004\022\005\030\006\007\007\017\013\016\016" +
    "\015\021\013\022\027\027\025\032\011\033\014\041\010" +
    "\001\001\000\004\035\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\124\022\102\001\001\000\004" +
    "\031\125\001\001\000\004\034\126\001\001\000\034\003" +
    "\127\004\022\005\030\006\007\007\017\013\016\016\015" +
    "\021\013\022\027\027\025\032\011\033\014\041\010\001" +
    "\001\000\004\035\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\137\022\135\024\136\001\001\000\004\024\144\001\001" +
    "\000\004\022\142\001\001\000\004\031\140\001\001\000" +
    "\004\025\141\001\001\000\002\001\001\000\010\011\143" +
    "\022\135\024\136\001\001\000\002\001\001\000\010\011" +
    "\145\022\135\024\136\001\001\000\002\001\001\000\004" +
    "\026\147\001\001\000\004\042\150\001\001\000\004\026" +
    "\152\001\001\000\002\001\001\000\004\042\153\001\001" +
    "\000\004\026\154\001\001\000\004\031\155\001\001\000" +
    "\004\034\156\001\001\000\034\003\157\004\022\005\030" +
    "\006\007\007\017\013\016\016\015\021\013\022\027\027" +
    "\025\032\011\033\014\041\010\001\001\000\004\035\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public static void main(String args[]) throws Exception{
    //    new Parser (new Yylex(System.in)).parse();
    }

    public void report_fatal_error() throws Exception {
        throw new Exception();
    }
    
    public void syntax_error(Symbol s){
        this.s = s;       
    }
    
    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COMPREPETT ::= COMPREPET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPREPETT",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // REPETT ::= REPET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPETT",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // REPETICAO ::= REPETT ABREPART INTEIROT COMPREPETT INTEIROT COMPREPETT INTEIROT FECHAPART ABRECHAVT EXPR FECHACHAVT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPETICAO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COMPARACAOT ::= COMPARACAO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARACAOT",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COMPARA ::= VAR COMPARACAOT OPERA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COMPARA ::= VAR COMPARACAOT STRINGT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COMPARA ::= VAR COMPARACAOT INTEIROT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENAOT ::= SENAO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENAOT",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONDICIONALSENAO ::= SENAOT ABRECHAVT EXPR FECHACHAVT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSENAO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENAOSET ::= SENAOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENAOSET",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDICIONALSENAOSE ::= SENAOSET ABREPART COMPARA FECHAPART ABRECHAVT EXPR FECHACHAVT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSENAOSE",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FECHACHAVT ::= FECHACHAV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FECHACHAVT",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ABRECHAVT ::= ABRECHAV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ABRECHAVT",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SET ::= SE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SET",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDICIONALSE ::= SET ABREPART COMPARA FECHAPART ABRECHAVT EXPR FECHACHAVT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONALSE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDICIONAL ::= CONDICIONALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDICIONAL ::= CONDICIONALSE CONDICIONALSENAOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICIONAL ::= CONDICIONALSE CONDICIONALSENAO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICIONAL ::= CONDICIONALSE CONDICIONALSENAOSE CONDICIONALSENAO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DENTROESCRITA ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DENTROESCRITA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DENTROESCRITA ::= STRINGT VAR DENTROESCRITA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DENTROESCRITA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DENTROESCRITA ::= VAR STRINGT DENTROESCRITA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DENTROESCRITA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DENTROESCRITA ::= STRINGT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DENTROESCRITA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DENTROESCRITA ::= STRINGT VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DENTROESCRITA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DENTROESCRITA ::= VAR STRINGT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DENTROESCRITA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ESCREVAT ::= ESCREVA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCREVAT",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESCRITA ::= ESCREVAT ABREPART DENTROESCRITA FECHAPART FIMMLINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESCRITA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FECHAPART ::= FECHAPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FECHAPART",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ABREPART ::= ABREPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ABREPART",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LEIAT ::= LEIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEIAT",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LEITURA ::= LEIAT ABREPART VAR FECHAPART FIMMLINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEITURA",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERADORT ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERADORT",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERA ::= VAR OPERADORT OPERA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERA ::= VAR OPERADORT INTEIROT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERA ::= ABREPAR OPERA FECHAPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERA ::= ABREPAR OPERA FECHAPAR OPERADORT OPERA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERA ::= INTEIROT OPERADORT INTEIROT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INTEIROT ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTEIROT",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FIMMLINHA ::= FIMLINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIMMLINHA",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STRINGT ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRINGT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ATRIBUICAO ::= ATRIB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VAR ::= VARIAVEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATRIBUI ::= VAR ATRIBUICAO OPERA FIMMLINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUI",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ATRIBUI ::= VAR ATRIBUICAO INTEIROT FIMMLINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUI",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ATRIBUI ::= VAR ATRIBUICAO STRINGT FIMMLINHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUI",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COMENTARIOT ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMENTARIOT",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPR ::= REPETICAO EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPR ::= COMENTARIOT EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPR ::= ESCRITA EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPR ::= CONDICIONAL EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPR ::= LEITURA EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPR ::= ATRIBUI EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPR ::= REPETICAO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXPR ::= COMENTARIOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXPR ::= ESCRITA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPR ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPR ::= LEITURA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXPR ::= ATRIBUI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FIMM ::= FIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIMM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INI ::= INICIO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= INI EXPR FIMM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

